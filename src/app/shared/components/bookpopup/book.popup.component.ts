import { Component, EventEmitter, Inject, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { Appointment } from '../../../interfaces/appointment.interface';
import { AuthService } from '../../../core/services/auth.service';
import { AppointmentService } from '../../../core/services/appointment.service';

@Component({
  selector: 'app-book-popup',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './book.popup.component.html',
  styleUrl: './book.popup.component.scss',
})
export class BookPopupComponent {
  @Output() close = new EventEmitter<void>();
  @Output() bookAppointment = new EventEmitter<Appointment>();

  bookingForm!: FormGroup;
  minDate = new Date();
  maxDate = new Date();
  timeSlots: string[] = [];
  isLoading = false;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private appointmentService: AppointmentService
  ) {
    this.setupDateConstraints();
    this.bookingForm = this.fb.group({
      date: ['', [Validators.required]],
      time: ['', [Validators.required]],
      notes: ['', [Validators.maxLength(500)]]
    });
    this.generateTimeSlots();
  }

  private setupDateConstraints() {
    // Set max date to 3 months from now
    this.maxDate.setMonth(this.maxDate.getMonth() + 3);

    // Ensure minDate is start of tomorrow if it's past 5 PM
    const now = new Date();
    if (now.getHours() >= 17) {
      this.minDate.setDate(this.minDate.getDate() + 1);
    }
    this.minDate.setHours(0, 0, 0, 0);
  }



  private generateTimeSlots() {
    // Generate time slots from 9 AM to 5 PM
    for (let hour = 9; hour < 17; hour++) {
      this.timeSlots.push(`${hour.toString().padStart(2, '0')}:00`);
      this.timeSlots.push(`${hour.toString().padStart(2, '0')}:30`);
    }
  }

  onBookAppointment(): void {
    debugger
    if (this.bookingForm.valid && !this.isLoading) {
      this.isLoading = true;

      const formValue = this.bookingForm.value;
      const appointment: Appointment = {
        supplierId: '', // This should be set from the supplier data
        title: 'Appointment',
        description: formValue.notes || '',
        date: formValue.date,
        time: formValue.time,
        location: '', // This should be set from the supplier data
        status: 'scheduled'
      };
      this.appointmentService.create(appointment).subscribe({
        next: (createdAppointment) => {
          // Emit the created appointment with the ID generated by the backend
          this.bookAppointment.emit(createdAppointment);
          this.closePopup();
          this.isLoading = false;
        },
        error: (err) => {
          console.error(err);
          this.isLoading = false;
        }
      });
    }
  }

  closePopup(): void {
    this.isLoading = false;
    this.close.emit();
  }

  isDateDisabled = (date: Date): boolean => {
    return date.getDay() === 0 || date.getDay() === 6; // Disable weekends
  }
}
